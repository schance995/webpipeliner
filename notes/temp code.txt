# code for processing the filename
rgx = '^(.*)\.R[12]\.fastq\.gz$'

m = re.match()
if not m:
    return (False, "The filename should end with R1.fastq.gz or R2.fastq.gz')
else:
    err = ''
    captured = m[1]
    if captured[0].isdigit():
        err += '\nShould not start with a digit'
    if ' ' in captured:
        err += '\n'Should not contain a space'
    if '-' in captured:
        err += '\nShould not contain a hyphen/minus sign'
    if 'sample' in captured:
        err += '\nShould not contain the word "sample"'
    if 'R1' in captured:
        err += '\nShould not contain the word "R1"'
    if 'R2' in captured:
        err += '\nShould not contain the word "R2"'
    if err != '':
        err = 'The sample name has the following errors:' + err
    return (err == '', err)

# code for processing groups.tab
'''
if file is uploaded lines can be read first then sent to the function:
F=open('groups.tab', 'r')
lines=F.readlines()
F.close()
fun(lines) # a list of lines
'''
# give a list of lines
d={} # dictionaries preserve insertion order
labels=[]
line_num = 0
groups={"rsamps":"na","rgroups":"na","rlabels":"na"} # default
err = ''
for line in lines:
    line_num += 1
    parts = line.split() # this just splits by whitespace. should it split by tabs?
    if len(parts) > 3:
        err = 'There are too many columns on line ' + str(line_num)
        break
    elif len(parts) < 3:
        err = 'There are too little columns on line ' + str(line_num)
        break
    # exactly 3 parts
    # assume for now that basename+A and samebasename+A is illegal
    if parts[0] in d:
        err = 'The same sample name appeared twice, check line ' + str(line_num)
        break
    d[parts[0]] = parts[1]
    labels.append(parts[2])
if err == '':
    groups["rsamps"]=d.keys()
    groups["rgroups"]=d.values()
    groups["rlabels"]=labels
return (groups, err)

# code to verify groups.tab
# assume only 1 line is needed
# groups.tab must exist, and the groups must exist in groups.tab.
# is this a correct assumption?
# assuming that a list of groups called groups exists
F=open('contrasts.tab', 'r')
line=F.readline() # only need first line
F.close()
parts = line.split()
err = ''
contrasts = [None, None]
if len(parts) > 2:
    err = 'There are too many columns on line ' + str(line_num)
elif len(parts) < 3:
    err = 'There are too little columns on line ' + str(line_num)
else:
    if parts[0] and parts[1] in groups:
        contrasts[0:2] = parts # replace part of array
    else:
        err = 'The groups in contrasts.tab don't exist in groups.tab'
return (contrasts, err)